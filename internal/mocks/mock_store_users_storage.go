// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/store/users (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_store_users_storage.go -package=mocks -mock_names Storage=MockUsersStorage ./internal/store/users Storage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	users "github.com/aleksandrpnshkn/go-shortener/internal/store/users"
	gomock "go.uber.org/mock/gomock"
)

// MockUsersStorage is a mock of Storage interface.
type MockUsersStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUsersStorageMockRecorder
	isgomock struct{}
}

// MockUsersStorageMockRecorder is the mock recorder for MockUsersStorage.
type MockUsersStorageMockRecorder struct {
	mock *MockUsersStorage
}

// NewMockUsersStorage creates a new mock instance.
func NewMockUsersStorage(ctrl *gomock.Controller) *MockUsersStorage {
	mock := &MockUsersStorage{ctrl: ctrl}
	mock.recorder = &MockUsersStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersStorage) EXPECT() *MockUsersStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUsersStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUsersStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUsersStorage)(nil).Close))
}

// Create mocks base method.
func (m *MockUsersStorage) Create(ctx context.Context) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUsersStorageMockRecorder) Create(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersStorage)(nil).Create), ctx)
}

// Get mocks base method.
func (m *MockUsersStorage) Get(ctx context.Context, userID int64) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUsersStorageMockRecorder) Get(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsersStorage)(nil).Get), ctx, userID)
}

// Ping mocks base method.
func (m *MockUsersStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockUsersStorageMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockUsersStorage)(nil).Ping), ctx)
}
