// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/store/urls (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_store_urls_storage.go -package=mocks -mock_names Storage=MockURLsStorage ./internal/store/urls Storage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	urls "github.com/aleksandrpnshkn/go-shortener/internal/store/urls"
	users "github.com/aleksandrpnshkn/go-shortener/internal/store/users"
	types "github.com/aleksandrpnshkn/go-shortener/internal/types"
	gomock "go.uber.org/mock/gomock"
)

// MockURLsStorage is a mock of Storage interface.
type MockURLsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockURLsStorageMockRecorder
	isgomock struct{}
}

// MockURLsStorageMockRecorder is the mock recorder for MockURLsStorage.
type MockURLsStorageMockRecorder struct {
	mock *MockURLsStorage
}

// NewMockURLsStorage creates a new mock instance.
func NewMockURLsStorage(ctrl *gomock.Controller) *MockURLsStorage {
	mock := &MockURLsStorage{ctrl: ctrl}
	mock.recorder = &MockURLsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLsStorage) EXPECT() *MockURLsStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockURLsStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockURLsStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockURLsStorage)(nil).Close))
}

// DeleteManyByUserID mocks base method.
func (m *MockURLsStorage) DeleteManyByUserID(ctx context.Context, codes []types.Code, user *users.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteManyByUserID", ctx, codes, user)
}

// DeleteManyByUserID indicates an expected call of DeleteManyByUserID.
func (mr *MockURLsStorageMockRecorder) DeleteManyByUserID(ctx, codes, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManyByUserID", reflect.TypeOf((*MockURLsStorage)(nil).DeleteManyByUserID), ctx, codes, user)
}

// Get mocks base method.
func (m *MockURLsStorage) Get(ctx context.Context, code types.Code) (urls.ShortenedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, code)
	ret0, _ := ret[0].(urls.ShortenedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockURLsStorageMockRecorder) Get(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockURLsStorage)(nil).Get), ctx, code)
}

// GetByUserID mocks base method.
func (m *MockURLsStorage) GetByUserID(ctx context.Context, user *users.User) ([]urls.ShortenedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, user)
	ret0, _ := ret[0].([]urls.ShortenedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockURLsStorageMockRecorder) GetByUserID(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockURLsStorage)(nil).GetByUserID), ctx, user)
}

// Ping mocks base method.
func (m *MockURLsStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockURLsStorageMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockURLsStorage)(nil).Ping), ctx)
}

// Set mocks base method.
func (m *MockURLsStorage) Set(ctx context.Context, url urls.ShortenedURL, user *users.User) (urls.ShortenedURL, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, url, user)
	ret0, _ := ret[0].(urls.ShortenedURL)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Set indicates an expected call of Set.
func (mr *MockURLsStorageMockRecorder) Set(ctx, url, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockURLsStorage)(nil).Set), ctx, url, user)
}

// SetMany mocks base method.
func (m *MockURLsStorage) SetMany(ctx context.Context, arg1 map[string]urls.ShortenedURL, user *users.User) (map[string]urls.ShortenedURL, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMany", ctx, arg1, user)
	ret0, _ := ret[0].(map[string]urls.ShortenedURL)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetMany indicates an expected call of SetMany.
func (mr *MockURLsStorageMockRecorder) SetMany(ctx, arg1, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMany", reflect.TypeOf((*MockURLsStorage)(nil).SetMany), ctx, arg1, user)
}
