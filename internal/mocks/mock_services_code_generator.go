// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services (interfaces: CodeGenerator)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_services_code_generator.go -package=mocks ./internal/services CodeGenerator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/aleksandrpnshkn/go-shortener/internal/types"
	gomock "go.uber.org/mock/gomock"
)

// MockCodeGenerator is a mock of CodeGenerator interface.
type MockCodeGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockCodeGeneratorMockRecorder
	isgomock struct{}
}

// MockCodeGeneratorMockRecorder is the mock recorder for MockCodeGenerator.
type MockCodeGeneratorMockRecorder struct {
	mock *MockCodeGenerator
}

// NewMockCodeGenerator creates a new mock instance.
func NewMockCodeGenerator(ctrl *gomock.Controller) *MockCodeGenerator {
	mock := &MockCodeGenerator{ctrl: ctrl}
	mock.recorder = &MockCodeGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeGenerator) EXPECT() *MockCodeGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockCodeGenerator) Generate() types.Code {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(types.Code)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockCodeGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockCodeGenerator)(nil).Generate))
}
