// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services (interfaces: Auther)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_services_auther.go -package=mocks ./internal/services Auther
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	users "github.com/aleksandrpnshkn/go-shortener/internal/store/users"
	gomock "go.uber.org/mock/gomock"
)

// MockAuther is a mock of Auther interface.
type MockAuther struct {
	ctrl     *gomock.Controller
	recorder *MockAutherMockRecorder
	isgomock struct{}
}

// MockAutherMockRecorder is the mock recorder for MockAuther.
type MockAutherMockRecorder struct {
	mock *MockAuther
}

// NewMockAuther creates a new mock instance.
func NewMockAuther(ctrl *gomock.Controller) *MockAuther {
	mock := &MockAuther{ctrl: ctrl}
	mock.recorder = &MockAutherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuther) EXPECT() *MockAutherMockRecorder {
	return m.recorder
}

// FromUserContext mocks base method.
func (m *MockAuther) FromUserContext(ctx context.Context) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromUserContext", ctx)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromUserContext indicates an expected call of FromUserContext.
func (mr *MockAutherMockRecorder) FromUserContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromUserContext", reflect.TypeOf((*MockAuther)(nil).FromUserContext), ctx)
}

// ParseToken mocks base method.
func (m *MockAuther) ParseToken(ctx context.Context, token string) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", ctx, token)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAutherMockRecorder) ParseToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuther)(nil).ParseToken), ctx, token)
}

// RegisterUser mocks base method.
func (m *MockAuther) RegisterUser(ctx context.Context) (*users.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockAutherMockRecorder) RegisterUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAuther)(nil).RegisterUser), ctx)
}
