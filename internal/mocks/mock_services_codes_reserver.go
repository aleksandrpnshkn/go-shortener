// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services (interfaces: CodesReserver)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_services_codes_reserver.go -package=mocks ./internal/services CodesReserver
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/aleksandrpnshkn/go-shortener/internal/types"
	gomock "go.uber.org/mock/gomock"
)

// MockCodesReserver is a mock of CodesReserver interface.
type MockCodesReserver struct {
	ctrl     *gomock.Controller
	recorder *MockCodesReserverMockRecorder
	isgomock struct{}
}

// MockCodesReserverMockRecorder is the mock recorder for MockCodesReserver.
type MockCodesReserverMockRecorder struct {
	mock *MockCodesReserver
}

// NewMockCodesReserver creates a new mock instance.
func NewMockCodesReserver(ctrl *gomock.Controller) *MockCodesReserver {
	mock := &MockCodesReserver{ctrl: ctrl}
	mock.recorder = &MockCodesReserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodesReserver) EXPECT() *MockCodesReserverMockRecorder {
	return m.recorder
}

// GetCode mocks base method.
func (m *MockCodesReserver) GetCode(ctx context.Context) (types.Code, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", ctx)
	ret0, _ := ret[0].(types.Code)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockCodesReserverMockRecorder) GetCode(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockCodesReserver)(nil).GetCode), ctx)
}
